name: Android CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for changelog generation

    - name: Extract and Validate Version
      id: version
      run: |
        # Robust version extraction
        VERSION=$(grep 'versionName' app/build.gradle.kts | sed -E 's/.*versionName.*=.*"([0-9]+(?:\.[0-9]+)*).*".*/\1/')
        
        # Ensure proper format
        if [[ "$VERSION" =~ ^[0-9]+$ ]]; then
          VERSION="${VERSION}.0.0"
        elif [[ "$VERSION" =~ ^[0-9]+\.[0-9]+$ ]]; then
          VERSION="${VERSION}.0"
        fi
        
        # Final validation
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::error::Invalid version format in build.gradle.kts: '$VERSION'"
          echo "Use MAJOR.MINOR.PATCH format (e.g., 1.0.0)"
          exit 1
        fi
        
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "TAG_NAME=v${VERSION}" >> $GITHUB_OUTPUT
        echo "Extracted version: ${VERSION}"


    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run unit tests
      run: ./gradlew test

    - name: Run Lint
      run: ./gradlew lint

    - name: Build Release APK
      run: ./gradlew assembleRelease

    - name: Prepare Release Assets
      run: |
        mkdir -p release-assets
        
        # APKs
        find app/build/outputs/apk -name '*.apk' ! -name '*debug*' -exec cp {} release-assets/ \;
        
        # Rename APKs with version
        for f in release-assets/*.apk; do
          mv "$f" "release-assets/MiniMap-v${{ steps.version.outputs.VERSION }}.apk"
        done
        
        # Mapping file (if exists)
        if [ -f "app/build/outputs/mapping/release/mapping.txt" ]; then
          cp app/build/outputs/mapping/release/mapping.txt release-assets/
        else
          echo "Warning: mapping.txt not found"
        fi
        
        ls -la release-assets/

    - name: Upload Release Assets
      uses: actions/upload-artifact@v4
      with:
        name: release-assets
        path: release-assets/*

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download Assets
      uses: actions/download-artifact@v4
      with:
        name: release-assets
        path: release-assets/

    - name: Verify Assets
      run: |
        echo "Release assets:"
        ls -la release-assets/
        if [ ! -f "release-assets/MiniMap-v${{ needs.build.outputs.VERSION }}.apk" ]; then
          echo "::error::APK file missing!"
          exit 1
        fi

    - name: Check Tag Existence
      id: check_tag
      run: |
        TAG="${{ needs.build.outputs.TAG_NAME }}"
        if git rev-parse -q --verify "refs/tags/${TAG}" >/dev/null; then
          echo "::error::Tag ${TAG} already exists!"
          echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      if: steps.check_tag.outputs.TAG_EXISTS == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build.outputs.TAG_NAME }}
        name: MiniMap ${{ needs.build.outputs.TAG_NAME }}
        body: |
          ### Version ${{ needs.build.outputs.VERSION }}
          | Key | Value |
          |-----|-------|
          | Build Date | $(date -u +"%Y-%m-%d %H:%M:%S %Z") |
          | Commit | ${{ github.sha }} |
          
          ### Assets
          - APK: MiniMap-v${{ needs.build.outputs.VERSION }}.apk
          $([ -f "release-assets/mapping.txt" ] && echo "- ProGuard mapping")
        files: |
          release-assets/MiniMap-v${{ needs.build.outputs.VERSION }}.apk
          $([ -f "release-assets/mapping.txt" ] && echo "release-assets/mapping.txt")
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}