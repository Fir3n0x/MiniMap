name: Android CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Get Gradle Version
      id: gradle-version
      run: |
        # Extract version using Gradle task
        VERSION=$(./gradlew -q printVersionName)
        echo "Extracted version: $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "TAG_NAME=v$VERSION" >> $GITHUB_OUTPUT

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run unit tests
      run: ./gradlew test

    - name: Run Lint
      run: ./gradlew lint

    - name: Build Release APK
      run: ./gradlew assembleRelease
        
    - name: Prepare APKs
      run: |
        mkdir -p release-apks
        find app/build/outputs/apk -name '*.apk' ! -name '*debug*' -exec cp {} release-apks/ \;
        for f in release-apks/*.apk; do
          mv "$f" "release-apks/MiniMap-v${{ steps.gradle-version.outputs.VERSION }}.apk"
        done
        ls -la release-apks/

    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: app-release
        path: release-apks/*.apk

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: app-release
        path: apk-files/

    - name: Verify APK exists
      run: |
        ls -la apk-files/
        if [ $(ls apk-files/ | wc -l) -eq 0 ]; then
          echo "Error: No APK files found!"
          exit 1
        fi

    - name: Check if tag exists
      id: check-tag
      run: |
        TAG="v${{ needs.build.outputs.VERSION }}"
        if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
          echo "::error::Tag $TAG already exists!"
          echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      if: steps.check-tag.outputs.TAG_EXISTS == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.build.outputs.VERSION }}
        name: MiniMap v${{ needs.build.outputs.VERSION }}
        body: |
          ### Version ${{ needs.build.outputs.VERSION }}
          | Key | Value |
          |-----|-------|
          | Build Date | $(date -u +"%Y-%m-%d %H:%M:%S %Z") |
          | Commit | ${{ github.sha }} |
          
          ### Assets
          - APK: MiniMap-v${{ needs.build.outputs.VERSION }}.apk
        files: |
          apk-files/*.apk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}