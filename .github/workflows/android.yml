name: Android CI/CD

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run unit tests
      run: ./gradlew test

    - name: Run Lint
      run: ./gradlew lint

    - name: Build Release APK
      run: ./gradlew assembleRelease

    - name: Prepare APKs
      run: |
        # mkdir -p release-apks
        # # Copy only signed release builds (exclude debug and unsigned)
        # find app/build/outputs/apk/release -name '*.apk' ! -name '*debug*' ! -name '*unsigned*' -exec cp {} release-apks/ \;
        
        # # Rename with version
        # for f in release-apks/*.apk; do
        #   mv "$f" "release-apks/MiniMap-v$(grep 'versionName' app/build.gradle.kts | sed -E 's/.*versionName.*=.*"(.*)".*/\1/').apk"
        # done


        mkdir -p release-apks
    
        # Debug: Show APK locations first
        echo "Looking for APKs in:"
        find app/build/outputs/apk -name '*.apk' || echo "No APKs found"
        
        # Copy ALL APKs first (we'll filter later)
        find app/build/outputs/apk -name '*.apk' -exec cp {} release-apks/ \;
        
        # Debug: Show what was copied
        echo "Copied APKs:"
        ls -la release-apks/
        
        # Rename only release builds
        for f in release-apks/*.apk; do
          if [[ "$f" != *"debug"* ]]; then
            new_name="release-apks/MiniMap-v$(grep 'versionName' app/build.gradle.kts | sed -E 's/.*versionName.*=.*"(.*)".*/\1/').apk"
            mv "$f" "$new_name"
          else
            rm "$f"  # Remove debug APKs
          fi
        done
        
        # Final check
        echo "Final APKs:"
        ls -la release-apks/
        
    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: app-release
        path: release-apks/*.apk

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: app-release
        path: apk-files/

    - name: Clean Duplicate APKs
      run: |
        cd apk-files
        # Keep only the properly named APK
        ls | grep -v 'MiniMap-v' | xargs rm -f
        ls -la

    - name: Verify APK exists
      run: |
        echo "APK files:"
        ls -la apk-files/
        if [ $(ls apk-files/ | wc -l) -eq 0 ]; then
          echo "Error: No APK files found!"
          exit 1
        fi

    - name: Get version from Gradle
      id: version
      run: |
        VERSION=$(grep 'versionName' app/build.gradle.kts | sed -E 's/.*versionName.*=.*"(.*)".*/\1/')
        [ -z "$VERSION" ] && VERSION="1.0"
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        name: MiniMap v${{ steps.version.outputs.VERSION }}
        generate_release_notes: true
        files: |
          apk-files/*.apk
          app/build/outputs/mapping/release/mapping.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
