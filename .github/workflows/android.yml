name: Android CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Get Gradle Version
      id: gradle-version
      run: |
        # Create a temporary build file to print version
        cat << 'EOF' > printversion.gradle
        println(project.android.defaultConfig.versionName)
        EOF
        
        # Run the script and capture version
        VERSION=$(./gradlew -q -I printversion.gradle --console=plain)
        echo "Extracted version: '$VERSION'"
        
        # Clean up
        rm printversion.gradle
        
        # Set outputs
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run unit tests
      run: ./gradlew test

    - name: Run Lint
      run: ./gradlew lint

    - name: Build Release APK
      run: ./gradlew assembleRelease
        
    - name: Prepare APKs
      run: |
        mkdir -p release-apks
        find app/build/outputs/apk/release -name '*.apk' ! -name '*debug*' -exec cp {} release-apks/ \;
        for f in release-apks/*.apk; do
          mv "$f" "release-apks/MiniMap-v${VERSION}.apk"
        done

    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: app-release
        path: release-apks/*.apk

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: app-release
        path: apk-files/

    - name: Verify APK exists
      run: |
        ls -la apk-files/
        if [ $(ls apk-files/ | wc -l) -eq 0 ]; then
          echo "Error: No APK files found!"
          exit 1
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.build.outputs.version }}
        name: MiniMap v${{ needs.build.outputs.version }}
        body: |
          ### Version ${{ needs.build.outputs.version }}
          | Key | Value |
          |-----|-------|
          | Build Date | $(date -u +"%Y-%m-%d %H:%M:%S %Z") |
          | Commit | ${{ github.sha }} |
          
          ### Assets
          - APK: MiniMap-v${{ needs.build.outputs.version }}.apk
        files: |
          apk-files/*.apk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}